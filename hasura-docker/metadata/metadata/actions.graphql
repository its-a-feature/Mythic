type Mutation {
  addAttackToTask(
    t_num: String!
    task_display_id: Int!
  ): addAttackToTaskOutput
}

type Query {
  c2GetIOC(
    uuid: String!
  ): GetIOCOutput
}

type Mutation {
  c2HostFile(
    c2_id: Int!
    file_uuid: String!
    host_url: String!
    alert_on_download: Boolean
    remove: Boolean
  ): c2HostFileOutput
}

type Query {
  c2SampleMessage(
    uuid: String!
  ): C2SampleMessageOutput
}

type Mutation {
  callbackgraphedge_add(
    source_id: Int!
    destination_id: Int!
    c2profile: String!
  ): CallbackgraphedgeAddOutput
}

type Mutation {
  callbackgraphedge_remove(
    edge_id: Int!
  ): CallbackgraphedgeRemoveOutput
}

type Query {
  config_check(
    uuid: String!
  ): ConfigCheckOutput
}

type Mutation {
  consumingServicesTestLog(
    service_type: String!
  ): consumingServicesTestLogOutput
}

type Mutation {
  consumingServicesTestWebhook(
    service_type: String!
  ): consumingServicesTestOutput
}

type Query {
  containerDownloadFile(
    container_name: String!
    filename: String!
  ): ContainerFile
}

type Query {
  containerListFiles(
    container_name: String!
  ): containerListFilesOutput
}

type Mutation {
  containerRemoveFile(
    container_name: String!
    filename: String!
  ): containerRemoveFileOutput
}

type Mutation {
  containerWriteFile(
    container_name: String!
    file_path: String!
    data: String!
  ): containerWriteFileOutput
}

type Mutation {
  createAPIToken(
    token_type: String!
    operator_id: Int
    name: String
  ): createAPITokenResponse!
}

type Mutation {
  createArtifact(
    task_id: Int
    base_artifact: String!
    artifact: String!
    needs_cleanup: Boolean
    resolved: Boolean
    host: String
  ): createArtifactOutput
}

type Mutation {
  createCallback(
    newCallback: newCallbackConfig
    payloadUuid: String!
  ): createCallbackOutput
}

type Mutation {
  createCredential(
    realm: String
    account: String
    credential: String!
    comment: String
    credential_type: String!
  ): createCredentialOutput
}

type Mutation {
  createInviteLink(
    operation_id: Int
    operation_role: String
    total: Int
    name: String
    short_code: String
  ): createInviteLinkOutput
}

type Mutation {
  createOperation(
    name: String
  ): createOperationOutput
}

type Mutation {
  createOperationEventLog(
    level: String!
    message: String!
    source: String
  ): createOperationEventLogOutput
}

type Mutation {
  createOperator(
    input: OperatorInput!
  ): OperatorOutput!
}

type Mutation {
  createPayload(
    payloadDefinition: String!
  ): createPayloadOutput!
}

type Mutation {
  createRandom(
    format_string: String!
  ): randomOutput
}

type Mutation {
  createTag(
    tagtype_id: Int!
    data: jsonb
    url: String
    source: String
    mythictree_id: Int
    filemeta_id: Int
    credential_id: Int
    taskartifact_id: Int
    keylog_id: Int
    response_id: Int
    task_id: Int
    payload_id: Int
    callback_id: Int
  ): createTagOutput
}

type Mutation {
  createTask(
    command: String!
    payload_type: String
    params: String!
    files: [String]
    callback_id: Int
    callback_ids: [Int]
    token_id: Int
    tasking_location: String
    original_params: String
    parameter_group_name: String
    parent_task_id: Int
    is_interactive_task: Boolean
    interactive_task_type: Int
  ): createTaskOutput
}

type Mutation {
  create_c2_instance(
    c2_instance: String!
    instance_name: String!
    c2profile_id: Int!
  ): createc2instanceOutput
}

type Mutation {
  deleteAPIToken(
    apitokens_id: Int!
  ): deleteAPITokenOutput
}

type Mutation {
  deleteBlockList(
    name: String!
  ): deleteBlockListOutput
}

type Mutation {
  deleteBlockListEntry(
    name: String!
    entries: [Int!]!
  ): deleteBlockListEntryOutput
}

type Mutation {
  deleteFile(
    file_id: Int
    file_ids: [Int!]
  ): deletionOutput
}

type Mutation {
  deleteTagtype(
    id: Int!
  ): deleteTagtypeOutput
}

type Mutation {
  deleteTasksAndCallbacks(
    tasks: [Int]
    callbacks: [Int]
  ): deleteTasksAndCallbacksOutput
}

type Mutation {
  download_bulk(
    files: [String!]!
  ): BulkDownloadOutput
}

type Mutation {
  dynamic_query_function(
    command: String!
    parameter_name: String!
    payload_type: String!
    callback: Int!
    other_parameters: jsonb
  ): dynamicQueryOutput
}

type Query {
  eventingExportWorkflow(
    eventgroup_id: Int!
    include_steps: Boolean!
    output_format: String!
  ): eventingExportWorkflowOutput
}

type Mutation {
  eventingImportContainerWorkflow(
    contents: String!
    filename: String!
    container_name: String!
    delete_old_version: Boolean
  ): eventingImportContainerWorkflowOutput
}

type Query {
  eventingTestFile(
    file_contents: String!
    output_format: String
  ): eventingTestFileOutput
}

type Mutation {
  eventingTriggerCancel(
    eventgroupinstance_id: Int!
  ): eventingTriggerCancelOutput
}

type Mutation {
  eventingTriggerKeyword(
    keyword: String!
    keywordEnvData: jsonb!
  ): eventingTriggerKeywordOutput
}

type Mutation {
  eventingTriggerManual(
    eventgroup_id: Int!
  ): eventingTriggerManualOutput
}

type Mutation {
  eventingTriggerRetry(
    eventgroupinstance_id: Int!
  ): eventingTriggerRetryOutput
}

type Mutation {
  eventingTriggerRetryFromStep(
    eventstepinstance_id: Int!
    retry_all_groups: Boolean
  ): eventingTriggerRetryFromStepOutput
}

type Mutation {
  eventingTriggerRunAgain(
    eventgroupinstance_id: Int!
  ): eventingTriggerRunAgainOutput
}

type Mutation {
  eventingTriggerUpdate(
    eventgroup_id: Int!
    active: Boolean
    deleted: Boolean
    updated_config: String
  ): eventingTriggerUpdateOutput
}

type Query {
  exportCallbackConfig(
    agent_callback_id: String!
  ): exportCallbackConfigOutput
}

type Query {
  exportPayloadConfig(
    uuid: String!
  ): PayloadConfig
}

type Mutation {
  generateReport(
    outputFormat: String!
    includeMITREPerTask: Boolean!
    includeMITREOverall: Boolean!
    excludedUsers: String!
    excludedHosts: String!
    excludedIDs: String!
    includeOutput: Boolean!
  ): generateReportOutput
}

type Query {
  getGlobalSettings: globalSettingsOutput
}

type Query {
  getInviteLinks: getInviteLinksOutput
}

type Query {
  getOperatorPreferences: getOperatorPreferencesOutput
}

type Query {
  getOperatorSecrets(
    operator_id: Int
  ): getOperatorSecretsOutput
}

type Query {
  getProfileOutput(
    id: Int!
  ): ProfileOutput
}

type Mutation {
  importCallbackConfig(
    config: jsonb!
  ): importCallbackConfigOutput
}

type Mutation {
  importTagtypes(
    tagtypes: String!
  ): importTagtypesOutput
}

type Mutation {
  import_c2_instance(
    c2_instance: jsonb!
    instance_name: String!
    c2profile_name: String!
  ): createc2instanceOutput
}

type Query {
  meHook: meHookOutput
}

type Mutation {
  previewFile(
    file_id: String!
  ): previewFileOutput
}

type Mutation {
  rebuild_payload(
    uuid: String!
  ): rebuildOutput
}

type Query {
  redirect_rules(
    uuid: String!
  ): redirectOutput
}

type Mutation {
  reissue_task(
    task_id: Int!
  ): ReissueTaskOutput
}

type Mutation {
  reissue_task_handler(
    task_id: Int!
  ): ReissueTaskHandlerOutput
}

type Mutation {
  requestOpsecBypass(
    task_id: Int!
  ): BypassOutput
}

type Mutation {
  sendExternalWebhook(
    webhook_type: String!
    webhook_data: jsonb!
  ): sendExternalWebhookOutput
}

type Mutation {
  startStopProfile(
    id: Int!
    action: String
  ): startStopOutput
}

type Mutation {
  testProxy(
    callbackport_id: Int!
  ): testProxyOutput
}

type Mutation {
  toggleProxy(
    callbackport_id: Int!
    action: String!
  ): toggleProxyOutput
}

type Mutation {
  typedarray_parse_function(
    command: String!
    parameter_name: String!
    payload_type: String!
    callback: Int!
    input_array: [String!]!
  ): typedarrayParseOutput
}

type Mutation {
  updateCallback(
    input: updateCallbackInput!
  ): updateCallbackOutput
}

type Mutation {
  updateCurrentOperation(
    user_id: Int!
    operation_id: Int!
  ): updateCurrentOperationOutput
}

type Mutation {
  updateEventGroupApproval(
    eventgroupapproval_id: Int!
    approved: Boolean!
  ): updateEventGroupApprovalOutput
}

type Mutation {
  updateGlobalSettings(
    settings: jsonb!
  ): updateGlobalSettingsOutput
}

type Mutation {
  updateInviteLink(
    code: String!
    total: Int!
  ): updateInviteLinkOutput
}

type Mutation {
  updateOperation(
    operation_id: Int!
    name: String
    channel: String
    complete: Boolean
    webhook: String
    admin_id: Int
    deleted: Boolean
    banner_text: String
    banner_color: String
  ): updateOperationOutput
}

type Mutation {
  updateOperatorOperation(
    operation_id: Int!
    add_users: [Int]
    remove_users: [Int]
    view_mode_operators: [Int]
    view_mode_spectators: [Int]
    disabled_command_map: [disabledCommand]
  ): updateOperatorOperationOutput
}

type Mutation {
  updateOperatorPreferences(
    preferences: jsonb!
  ): updateOperatorPreferencesOutput
}

type Mutation {
  updateOperatorSecrets(
    secrets: jsonb!
    operator_id: Int
  ): updateOperatorSecretsOutput
}

type Mutation {
  updateOperatorStatus(
    operator_id: Int!
    active: Boolean
    admin: Boolean
    deleted: Boolean
  ): updateOperatorStatusOutput
}

type Mutation {
  updatePasswordAndEmail(
    user_id: Int!
    new_password: String
    old_password: String
    email: String
  ): passwordUpdateOutput
}

type Mutation {
  updatePayload(
    payload_uuid: String!
    callback_alert: Boolean
    callback_allowed: Boolean
    description: String
    deleted: Boolean
  ): updatePayloadOutput
}

input OperatorInput {
  username: String!
  password: String
  email: String
  bot: Boolean
}

input CreatePayloadInput {
  input_string: String!
}

input updateCallbackInput {
  callback_display_id: Int
  callback_display_ids: [Int]
  active: Boolean
  locked: Boolean
  description: String
  ips: [String]
  host: String
  user: String
  os: String
  architecture: String
  extra_info: String
  sleep_info: String
  pid: Int
  process_name: String
  integrity_level: Int
  domain: String
  dead: Boolean
  color: String
  trigger_on_checkin_after_time: Int
}

input DictionaryEntry {
  key: String!
  value: String!
}

input tagtypeInput {
  name: String!
  color: String!
  description: String!
}

input NewCallbackConfig {
  ip: String
  externalIp: String
  user: String
  host: String
  domain: String
  description: String
  processName: String
  sleepInfo: String
  extraInfo: String
}

input newCallbackConfig {
  ip: String
  externalIp: String
  user: String
  host: String
  domain: String
  description: String
  processName: String
  sleepInfo: String
  extraInfo: String
}

input disabledCommand {
  user_id: Int!
  disabled_command_profile_id: Int!
}

type createAPITokenResponse {
  token_value: String
  status: String!
  error: String
  id: Int
  operator_id: Int
  name: String
  created_by: Int
  token_type: String
}

type OperatorOutput {
  username: String
  id: Int
  active: Boolean
  view_utc_time: Boolean
  creation_time: String
  last_login: String
  deleted: Boolean
  status: String!
  error: String
  admin: Boolean
  current_operation: String
  current_operation_id: Int
  ui_config: String
  failed_login_count: Int
  last_failed_login_timestamp: String
  account_type: String
  email: String
}

type createPayloadOutput {
  status: String!
  error: String
  uuid: String
}

type randomOutput {
  status: String!
  error: String
  random: String
}

type startStopOutput {
  status: String!
  error: String
  output: String
  version: String
}

type ProfileOutput {
  status: String!
  error: String
  output: String
  version: String
}

type ContainerFile {
  status: String!
  filename: String
  data: String
  error: String
  version: String
}

type uploadContainerOutput {
  status: String!
  error: String
  filename: String
  version: String
}

type SampleOutput {
  status: String!
  error: String
  id: Int
}

type createTaskOutput {
  status: String!
  error: String
  id: Int
  display_id: Int
}

type BypassOutput {
  status: String!
  error: String
}

type updateCallbackOutput {
  status: String!
  error: String
}

type BulkDownloadOutput {
  status: String!
  error: String
  file_id: String
}

type dynamicQueryOutput {
  status: String!
  parameter_name: String!
  error: String
  choices: [String]
  complex_choices: [dynamicQueryOutputChoice]
}

type rebuildOutput {
  status: String!
  error: String
  uuid: String
}

type redirectOutput {
  status: String!
  error: String
  output: String
}

type ConfigCheckOutput {
  status: String!
  error: String
  output: String
}

type createc2instanceOutput {
  status: String!
  error: String
}

type PayloadConfig {
  config: String
  status: String!
  error: String
}

type ReissueTaskOutput {
  status: String!
  error: String
}

type ReissueTaskHandlerOutput {
  status: String!
  error: String
}

type StopSocksOutput {
  status: String!
  error: String
}

type deletionOutput {
  status: String!
  error: String
  file_ids: [Int]
  payload_ids: [Int]
}

type passwordUpdateOutput {
  status: String!
  error: String
  email: String
  operator_id: Int
}

type updateCurrentOperationOutput {
  status: String!
  error: String
  operation_id: Int
  name: String
  complete: Boolean
  banner_text: String
  banner_color: String
}

type deleteBlockListOutput {
  status: String!
  error: String
  name: String
}

type deleteBlockListEntryOutput {
  status: String!
  error: String
  name: String
  deleted_ids: [Int]
}

type createOperationOutput {
  operation_id: Int
  operation_name: String
  status: String!
  error: String
}

type generateReportOutput {
  status: String!
  error: String
}

type previewFileOutput {
  status: String!
  error: String
  size: Int
  host: String
  full_remote_path: String
  filename: String
  contents: String
}

type meHookOutput {
  status: String!
  error: String
  current_operation_id: Int
  current_operation: String
}

type deleteTasksAndCallbacksOutput {
  status: String!
  error: String
  failed_tasks: [Int]
  failed_callbacks: [Int]
}

type sendExternalWebhookOutput {
  status: String!
  error: String
}

type deleteTagtypeOutput {
  status: String!
  error: String
  tagtype_id: Int!
}

type importTagtypesOutput {
  status: String!
  error: String
}

type CallbackgraphedgeAddOutput {
  status: String!
  error: String
}

type CallbackgraphedgeRemoveOutput {
  status: String!
  error: String
}

type createCallbackOutput {
  status: String!
  error: String
}

type consumingServicesOutput {
  status: String!
  error: String
  newcallback_logging_services_count: Int
  newcredential_logging_services_count: Int
  newfileupload_logging_services_count: Int
  newfiledownload_logging_services_count: Int
  newartifact_logging_services_count: Int
  newtask_logging_services_count: Int
  newscreenshot_logging_services_count: Int
  newpayload_logging_services_count: Int
  newkeylog_logging_services_count: Int
  newcallback_webhook_services_count: Int
  newfeedback_webhook_services_count: Int
  newstartup_webhook_services_count: Int
}

type consumingServicesTestOutput {
  status: String!
  error: String
}

type consumingServicesTestLogOutput {
  status: String!
  error: String
}

type c2ProfileListFilesOutput {
  status: String!
  error: String
  files: [String]
}

type removeContainerFileOutput {
  status: String!
  error: String
}

type addAttackToTaskOutput {
  status: String!
  error: String
}

type updateOperationOutput {
  status: String!
  error: String
  name: String
  channel: String
  complete: Boolean
  webhook: String
  admin_id: Int
  deleted: Boolean
  banner_text: String
  banner_color: String
  id: Int
}

type updateOperatorOperationOutput {
  status: String!
  error: String
}

type createCredentialOutput {
  status: String!
  error: String
  id: Int
}

type createOperationEventLogOutput {
  status: String!
  error: String
}

type GetIOCOutput {
  status: String!
  error: String
  output: String
}

type C2SampleMessageOutput {
  status: String!
  error: String
  output: String
}

type consumingServicesListOutput {
  webhooks: jsonb
  loggers: jsonb
}

type c2HostFileOutput {
  status: String!
  error: String
}

type typedarrayParseOutput {
  status: String!
  error: String
  typed_array: jsonb
}

type ToggleProxyOutput {
  status: String!
  action: String!
  error: String
}

type toggleProxyOutput {
  status: String!
  error: String
}

type updateOperatorStatusOutput {
  status: String!
  error: String
  id: Int
  admin: Boolean
  active: Boolean
  deleted: Boolean
}

type updateGlobalSettingsOutput {
  status: String!
  error: String
}

type globalSettingsOutput {
  settings: jsonb!
}

type exportCallbackConfigOutput {
  status: String!
  error: String
  agent_callback_id: String
  config: String
}

type importCallbackConfigOutput {
  status: String!
  error: String
}

type getOperatorSecretsOutput {
  status: String!
  error: String
  secrets: jsonb
  operator_id: Int
}

type updateOperatorSecretsOutput {
  status: String!
  error: String
}

type eventingManualTriggerOutput {
  status: String!
  error: String
}

type eventingTriggerManualOutput {
  status: String!
  error: String
}

type updateEventGroupApprovalOutput {
  status: String!
  error: String
}

type eventingTriggerCancelOutput {
  status: String!
  error: String
}

type deleteAPITokenOutput {
  status: String!
  error: String
  id: Int
  name: String
  operator_id: Int
}

type eventingTriggerKeywordOutput {
  status: String!
  error: String
}

type eventingTriggerRetryOutput {
  status: String!
  error: String
}

type eventingTriggerRunAgainOutput {
  status: String!
  error: String
}

type eventingTriggerUpdateOutput {
  status: String!
  error: String
  active: Boolean
  deleted: Boolean
  name: String
  description: String
  author: String
  trigger: String
  trigger_data: jsonb
  keywords: [String]
  env: jsonb
  run_as: String
}

type createInviteLinkOutput {
  status: String!
  error: String
  link: String
}

type getInviteLinksOutput {
  status: String!
  error: String
  links: jsonb
}

type deleteInviteLinkOutput {
  status: String!
  error: String
}

type containerRemoveFileOutput {
  status: String!
  error: String
}

type containerListFilesOutput {
  status: String!
  error: String
  files: [String]
}

type containerUploadFileOutput {
  status: String!
  error: String
  filename: String
  version: String
}

type containerWriteFileOutput {
  status: String!
  error: String
  filename: String
  version: String
}

type eventingTriggerRetryFromStepOutput {
  status: String!
  error: String
}

type testProxyOutput {
  status: String!
  error: String
}

type eventingTestFileOutput {
  status: String!
  error: String
  parsed_workflow: jsonb
  formatted_output: String
}

type getOperatorPreferencesOutput {
  status: String!
  error: String
  preferences: jsonb
}

type updateOperatorPreferencesOutput {
  status: String!
  error: String
}

type updateInviteLinkOutput {
  status: String!
  error: String
}

type eventingExportWorkflowOutput {
  status: String!
  error: String
  workflow: String
}

type eventingImportContainerWorkflowOutput {
  status: String!
  error: String
  eventgroup_id: Int
}

type createTagOutput {
  status: String!
  error: String
  id: Int
}

type dynamicQueryOutputChoice {
  display_value: String!
  value: String!
}

type createArtifactOutput {
  id: Int
  status: String!
  error: String
}

type updatePayloadOutput {
  status: String!
  error: String
  callback_alert: Boolean
  callback_allowed: Boolean
  description: String
  deleted: Boolean
  id: Int
  payload_uuid: String
}

